// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "TuneCent API Support",
            "url": "https://github.com/tunecent",
            "email": "support@tunecent.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns the health status of the API service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Health status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/music": {
            "get": {
                "description": "Get paginated list of music NFTs with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Music"
                ],
                "summary": "List all music NFTs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Limit (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by creator address",
                        "name": "creator",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of music",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/music/register": {
            "post": {
                "description": "Upload and register a new music NFT with metadata and audio file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Music"
                ],
                "summary": "Register new music NFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Creator's wallet address",
                        "name": "creator_address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Music title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Artist name",
                        "name": "artist",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Music genre",
                        "name": "genre",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Music description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Duration in seconds",
                        "name": "duration",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Audio file",
                        "name": "audio_file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Music registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/music/{tokenId}": {
            "get": {
                "description": "Retrieve music NFT metadata by token ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Music"
                ],
                "summary": "Get music by token ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Music Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid token ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Music not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/music/{tokenId}/analytics": {
            "get": {
                "description": "Retrieve analytics data for a specific music NFT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Music"
                ],
                "summary": "Get music analytics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Music Token ID",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Music analytics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid token ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Analytics not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "description": "Health check endpoints",
            "name": "Health"
        },
        {
            "description": "Music NFT registration and management endpoints",
            "name": "Music"
        },
        {
            "description": "Crowdfunding campaign endpoints",
            "name": "Campaigns"
        },
        {
            "description": "Royalty payment and simulation endpoints",
            "name": "Royalties"
        },
        {
            "description": "User profile and reputation endpoints",
            "name": "Users"
        },
        {
            "description": "Dashboard overview and statistics endpoints",
            "name": "Dashboard"
        },
        {
            "description": "Music analytics and metrics endpoints",
            "name": "Analytics"
        },
        {
            "description": "Wallet transaction and balance endpoints",
            "name": "Wallet"
        },
        {
            "description": "Leaderboard and ranking endpoints",
            "name": "Leaderboard"
        },
        {
            "description": "Portfolio and investment tracking endpoints",
            "name": "Portfolio"
        },
        {
            "description": "Music distribution management endpoints",
            "name": "Distribution"
        },
        {
            "description": "Notification management endpoints",
            "name": "Notifications"
        },
        {
            "description": "Revenue split ledger endpoints",
            "name": "Ledger"
        },
        {
            "description": "Blockchain audit and verification endpoints",
            "name": "Audit"
        },
        {
            "description": "Reinvestment suggestions and tracking endpoints",
            "name": "Reinvestment"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "TuneCent Backend API",
	Description:      "Complete TuneCent Backend API with 68 endpoints for music NFT, campaigns, royalties, analytics, and more",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
